[gd_scene load_steps=13 format=3 uid="uid://bnsd7innb8evy"]

[ext_resource type="PackedScene" uid="uid://wfssq6mqkmrt" path="res://game/scenes/programs/program.tscn" id="1_vuhxw"]
[ext_resource type="PackedScene" uid="uid://bsbif7qroffug" path="res://game/scenes/parameter/parameter_string.tscn" id="2_hi4ns"]
[ext_resource type="Texture2D" uid="uid://cfupnfea6aii8" path="res://game/icons/AtlasTextureBig.svg" id="2_irdv1"]
[ext_resource type="PackedScene" uid="uid://dpgx3mb2c87sw" path="res://game/scenes/parameter/parameter_filepath.tscn" id="3_d0uvx"]
[ext_resource type="PackedScene" uid="uid://d0sk7730ilig6" path="res://game/scenes/parameter/parameter_number.tscn" id="5_6t3gx"]
[ext_resource type="PackedScene" uid="uid://b0agby5b750h6" path="res://game/scenes/parameter/parameter_regex.tscn" id="6_1jrm7"]
[ext_resource type="PackedScene" uid="uid://scqegb5pvl8d" path="res://game/scenes/elements/image_preview.tscn" id="6_4wcr6"]
[ext_resource type="PackedScene" uid="uid://1vhcrt3tadog" path="res://game/scenes/parameter/parameter_bool.tscn" id="7_1jrm7"]
[ext_resource type="PackedScene" uid="uid://d0ihkarg2nvgg" path="res://game/scenes/elements/image_preview_grid.tscn" id="7_20joi"]
[ext_resource type="PackedScene" uid="uid://cu75ls07is6n0" path="res://game/scenes/elements/progress_display.tscn" id="8_4l84p"]
[ext_resource type="PackedScene" uid="uid://xx07uwu4xf5i" path="res://game/scenes/elements/privacy_mask.tscn" id="8_irdv1"]

[sub_resource type="GDScript" id="GDScript_20joi"]
script/source = "extends Program

var target_paths : Array[String]

func _refresh_elements() -> void:
	super._refresh_elements()
	$panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/progress_display \\
	.max_value = bus.get_value(\"output\", \"progress_display_max\", 1)
	
	var target_updated = bus.get_value(\"output\", \"target_updated\", \"\")
	if target_paths.has(target_updated) or target_updated == \"\": return
	target_paths.push_back(target_updated)


func get_progress() -> float:
	return float($panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/progress_display.value) / \\
		float($panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/progress_display.max_value)



func start() -> void:
	target_paths.clear()
	$panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/h_split_container/source_preview.visible = true
	$panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/h_split_container/target_grid.visible = false
	
	super.start()


func thread_stopped() -> void:
	super.thread_stopped()
	
	$panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/h_split_container/source_preview.visible = false
	$panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/h_split_container/target_grid.visible = true
	
	for path in target_paths:
		$panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/h_split_container/target_grid \\
		.update_image(path)
"

[node name="program_fatlas" node_paths=PackedStringArray("target_parameter", "progress_display", "elements") instance=ExtResource("1_vuhxw")]
script = SubResource("GDScript_20joi")
identifier = &"fatlas"
program_name = "Fatlas"
program_nickname = "Fatlas"
python_script_path = "res://game/scenes/programs/program_fatlas.py"
target_parameter = NodePath("panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters/target")
progress_display = NodePath("panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/progress_display")
elements = [NodePath("panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/h_split_container/source_preview"), NodePath("panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/progress_display")]

[node name="background_icon" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/background" index="0"]
texture = ExtResource("2_irdv1")

[node name="project_name" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="0" node_paths=PackedStringArray("program") instance=ExtResource("2_hi4ns")]
layout_mode = 2
tooltip_text = "Project name and also the name of the resulting image files and json data file."
label_text = "Project Name"
normal_tooltip = "Project name and also the name of the resulting image files and json data file."
program = NodePath("../../../../../../../../..")
persist_disabled = true

[node name="source" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="1" node_paths=PackedStringArray("program") instance=ExtResource("3_d0uvx")]
layout_mode = 2
file_mode = 2
label_text = "Source Directory"
program = NodePath("../../../../../../../../..")
persist_disabled = true

[node name="target" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="2" node_paths=PackedStringArray("program") instance=ExtResource("3_d0uvx")]
layout_mode = 2
file_mode = 2
label_text = "Target Directory"
program = NodePath("../../../../../../../../..")
persist_disabled = true

[node name="h_separator" type="HSeparator" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="3"]
layout_mode = 2

[node name="filter_include" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="4" node_paths=PackedStringArray("program") instance=ExtResource("6_1jrm7")]
layout_mode = 2
tooltip_text = "Filenames (INCLUDING extension) matching this regex filter will be added to the final image(s)."
_value = "\\.png$"
allow_empty = false
label_text = "Inclusion Filter"
normal_tooltip = "Filenames (INCLUDING extension) matching this regex filter will be added to the final image(s)."
program = NodePath("../../../../../../../../..")

[node name="filter_exclude" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="5" node_paths=PackedStringArray("program") instance=ExtResource("6_1jrm7")]
layout_mode = 2
tooltip_text = "Filenames (INCLUDING extension) matching this regex filter will be NOT added to the final image(s). Leave blank to exclude none."
label_text = "Exclusion Filter"
normal_tooltip = "Filenames (INCLUDING extension) matching this regex filter will be NOT added to the final image(s). Leave blank to exclude none."
program = NodePath("../../../../../../../../..")

[node name="filter_separate" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="6" node_paths=PackedStringArray("program") instance=ExtResource("6_1jrm7")]
layout_mode = 2
tooltip_text = "Filenames (EXCLUDING extension) matching this regex filter will be separated into different images.
This is primarily used to keep different kinds of images together, such as albedo and normal maps.
The match found will be placed at the end of the resulting target file.
For example, use \"_[a-zA-Z]$\" to separate files ending with an alphabetic character, like \"_n\", \"_o\", \"_m\", etc. 
Default: \".*\" (This default value will combine all images into a single image.)"
_value = "^"
allow_empty = false
label_text = "Separation Filter"
normal_tooltip = "Filenames (EXCLUDING extension) matching this regex filter will be separated into different images.
This is primarily used to keep different kinds of images together, such as albedo and normal maps.
The match found will be placed at the end of the resulting target file.
For example, use \"_[a-zA-Z]$\" to separate files ending with an alphabetic character, like \"_n\", \"_o\", \"_m\", etc. 
Default: \".*\" (This default value will combine all images into a single image.)"
program = NodePath("../../../../../../../../..")

[node name="filter_composite" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="7" node_paths=PackedStringArray("program") instance=ExtResource("6_1jrm7")]
visible = false
layout_mode = 2
tooltip_text = "Assigns composition data based on the internal groups of the regex. FOR NOW this only works with this specific pattern, so don't change this."
_value = "((.+?)(?:_(\\d+))?)_([lr])_(.)"
label_text = "Composite Filter"
normal_tooltip = "Assigns composition data based on the internal groups of the regex. FOR NOW this only works with this specific pattern, so don't change this."
program = NodePath("../../../../../../../../..")

[node name="h_separator_2" type="HSeparator" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="8"]
layout_mode = 2

[node name="image_format" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="9" node_paths=PackedStringArray("program") instance=ExtResource("2_hi4ns")]
visible = false
layout_mode = 2
_value = "RGBA"
label_text = "Image Format"
program = NodePath("../../../../../../../../..")

[node name="image_size_limit" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="10" node_paths=PackedStringArray("program") instance=ExtResource("5_6t3gx")]
visible = false
layout_mode = 2
tooltip_text = "The max pixel dimensions (square) a target image can be. If an island cannot be placed without expanding the target image beyond this limit, a new target image will be created. "
min_value = 1.0
max_value = 65536.0
_value = 65536.0
label_text = "Image Size Limit"
normal_tooltip = "The max pixel dimensions (square) a target image can be. If an island cannot be placed without expanding the target image beyond this limit, a new target image will be created. "
program = NodePath("../../../../../../../../..")

[node name="h_separator_3" type="HSeparator" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="11"]
visible = false
layout_mode = 2

[node name="island_crop" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="12" node_paths=PackedStringArray("program") instance=ExtResource("7_1jrm7")]
layout_mode = 2
tooltip_text = "If enabled, only the bounding box containing all visible pixels will be included.
If disabled, include the entire image. (Not recommended.)"
_value = true
label_text = "Crop Islands"
normal_tooltip = "If enabled, only the bounding box containing all visible pixels will be included.
If disabled, include the entire image. (Not recommended.)"
program = NodePath("../../../../../../../../..")

[node name="island_margin" parent="panel_container/margin_container/h_split_container/v_box_container/left_panel/scroll_container/margin_container/parameters" index="13" node_paths=PackedStringArray("program") instance=ExtResource("5_6t3gx")]
layout_mode = 2
tooltip_text = "The space between sprites and image bounds in the final image(s).
Default: 2"
max_value = 256.0
_value = 2.0
label_text = "Island Margin"
normal_tooltip = "The space between sprites and image bounds in the final image(s).
Default: 2"
program = NodePath("../../../../../../../../..")

[node name="v_box_container" type="VBoxContainer" parent="panel_container/margin_container/h_split_container/right_panel/margin_container" index="0"]
layout_mode = 2

[node name="h_split_container" type="Control" parent="panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container" index="0"]
layout_mode = 2
size_flags_vertical = 3

[node name="source_preview" parent="panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/h_split_container" index="0" instance=ExtResource("6_4wcr6")]
layout_mode = 1

[node name="target_grid" parent="panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/h_split_container" index="1" instance=ExtResource("7_20joi")]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3

[node name="privacy_mask" parent="panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/h_split_container" index="2" instance=ExtResource("8_irdv1")]
layout_mode = 1

[node name="progress_display" parent="panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container" index="1" instance=ExtResource("8_4l84p")]
layout_mode = 2

[connection signal="started" from="." to="panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/h_split_container/source_preview" method="clear"]
[connection signal="started" from="." to="panel_container/margin_container/h_split_container/right_panel/margin_container/v_box_container/h_split_container/target_grid" method="clear"]
